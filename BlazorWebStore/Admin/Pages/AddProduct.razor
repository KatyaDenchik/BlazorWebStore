@page "/add-edit-product/{id:int?}"

@using ComponentsCommon
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Shared.Models
@using Admin.Services

@inject NavigationManager Navigation
@inject ProductService ProductService
@inject IJSRuntime JSRuntime

<div class="page-container">
    <div class="sidebar">
        <a class="btn-products" href="/products">Products</a>
    </div>
    <div class="content">
        <ProductForm ProductModel="productModel" 
                     OnSubmit="HandleSubmit" 
                     OnFileChange="HandleFileChange" 
                     OnTriggerFile="TriggerFileDialog" />
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private ProductViewModel productModel = new();
    private const int FileSize = 4 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue && Id.Value > 0)
        {
            productModel = await ProductService.GetProductByIdAsync(Id.Value);
        }
    }

    private async Task HandleSubmit()
    {
        if (productModel.ImageData == null || productModel.ImageData.Length == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "No image selected. Please upload the file.");
            return;
        }

        await ProductService.CreateAsync(productModel);

        Navigation.NavigateTo("/products");
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        if (e.File is null)
            return;

        if (e.File.Size > FileSize)
        {
            Console.WriteLine("File size exceeds 4MB");
            return;
        }

        using var stream = e.File.OpenReadStream(maxAllowedSize: FileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        productModel.ImageData = memoryStream.ToArray();
    }

    private async Task TriggerFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("openFileDialog", "hiddenFileInput");
    }

    private string ConvertToBase64(byte[]? bytes)
    {
        if (bytes == null || bytes.Length == 0) return string.Empty;
        var base64String = Convert.ToBase64String(bytes);
        return $"data:image/png;base64,{base64String}";
    }
}
